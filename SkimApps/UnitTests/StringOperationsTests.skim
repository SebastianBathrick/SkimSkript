print("Starting String Operations Tests")
print("===============================")

print("Testing string concatenation with + operator...")
# String concatenation with + operator
assert "Hello" + "World" == "HelloWorld"
assert "Hello" + " " + "World" == "Hello World"
assert "Test" + "123" == "Test123"
assert "123" + "Test" == "123Test"
assert "Hello" + "" == "Hello"
assert "" + "World" == "World"
assert "" + "" == ""
print("String concatenation passed!")

print("Testing string to numeric coercion for math operations...")
# String to numeric coercion for math operations
# When strings are used in math operations, they are coerced to float
# If parsing fails, they default to the string length
assert "5" + "3" == "53"  # String concatenation takes precedence
assert "5" - "3" == 2.0   # Coerced to float: 5.0 - 3.0 = 2.0
assert "10" * "2" == 20.0 # Coerced to float: 10.0 * 2.0 = 20.0
assert "15" / "3" == 5.0  # Coerced to float: 15.0 / 3.0 = 5.0
assert "17" % "5" == 2.0  # Coerced to float: 17.0 % 5.0 = 2.0
assert "2" ^ "3" == 8.0   # Coerced to float: 2.0 ^ 3.0 = 8.0
print("String to numeric coercion passed!")

print("Testing string with non-numeric content...")
# String with non-numeric content defaults to length
assert "Hello" - "World" == 0.0   # 5 - 5 = 0.0
assert "Test" * "ABC" == 12.0     # 4 * 3 = 12.0
assert "LongString" / "Short" == 2.0  # 10 / 5 = 2.0
assert "Hello" % "World" == 0.0   # 5 % 5 = 0.0
assert "Test" ^ "ABC" == 64.0     # 4 ^ 3 = 64.0
print("String with non-numeric content passed!")

print("Testing mixed string and numeric operations...")
# Mixed string and numeric operations
assert "5" + 3 == "53"    # String concatenation with number
assert "Hello" + 123 == "Hello123"
assert 5 + "3" == "53"    # String concatenation with number
assert 123 + "Hello" == "123Hello"

# Math operations with mixed types
assert "10" - 3 == 7.0    # String coerced to float: 10.0 - 3.0 = 7.0
assert 10 - "3" == 7.0    # String coerced to float: 10.0 - 3.0 = 7.0
assert "5" * 4 == 20.0    # String coerced to float: 5.0 * 4.0 = 20.0
assert 5 * "4" == 20.0    # String coerced to float: 5.0 * 4.0 = 20.0
assert "20" / 4 == 5.0    # String coerced to float: 20.0 / 4.0 = 5.0
assert 20 / "4" == 5.0    # String coerced to float: 20.0 / 4.0 = 5.0
assert "17" % 5 == 2.0    # String coerced to float: 17.0 % 5.0 = 2.0
assert 17 % "5" == 2.0    # String coerced to float: 17.0 % 5.0 = 2.0
assert "2" ^ 3 == 8.0     # String coerced to float: 2.0 ^ 3.0 = 8.0
assert 2 ^ "3" == 8.0     # String coerced to float: 2.0 ^ 3.0 = 8.0
print("Mixed string and numeric operations passed!")

print("Testing string modulus with integers...")
# String modulus with integers (special case from OperationInterpreter)
# When one operand is IntValueNode and the other is string, it compares lengths
assert "Hello" % 5 == true   # 5 == 5 (string length equals int)
assert "Test" % 4 == true    # 4 == 4 (string length equals int)
assert "LongString" % 10 == true  # 10 == 10 (string length equals int)
assert "Hello" % 3 == false  # 5 != 3 (string length not equal to int)
assert "Test" % 6 == false   # 4 != 6 (string length not equal to int)
assert "Short" % 10 == false # 5 != 10 (string length not equal to int)
print("String modulus with integers passed!")

print("Testing string operations with negative numbers...")
# String operations with negative numbers
assert "5" + (-3) == "5-3"  # String concatenation with negative
assert (-5) + "3" == "-53"  # String concatenation with negative
assert "10" - (-3) == 13.0  # String coerced: 10.0 - (-3.0) = 13.0
assert (-10) - "3" == -13.0 # String coerced: (-10.0) - 3.0 = -13.0
assert "5" * (-2) == -10.0  # String coerced: 5.0 * (-2.0) = -10.0
assert (-5) * "2" == -10.0  # String coerced: (-5.0) * 2.0 = -10.0
assert "10" / (-2) == -5.0  # String coerced: 10.0 / (-2.0) = -5.0
assert (-10) / "2" == -5.0  # String coerced: (-10.0) / 2.0 = -5.0
assert "2" ^ (-1) == 0.5    # String coerced: 2.0 ^ (-1.0) = 0.5
assert (-2) ^ "3" == -8.0   # String coerced: (-2.0) ^ 3.0 = -8.0
print("String operations with negative numbers passed!")

print("Testing string operations with zero...")
# String operations with zero
assert "5" + 0 == "50"      # String concatenation with zero
assert 0 + "5" == "05"      # String concatenation with zero
assert "10" - 0 == 10.0     # String coerced: 10.0 - 0.0 = 10.0
assert 0 - "5" == -5.0      # String coerced: 0.0 - 5.0 = -5.0
assert "5" * 0 == 0.0       # String coerced: 5.0 * 0.0 = 0.0
assert 0 * "5" == 0.0       # String coerced: 0.0 * 5.0 = 0.0
assert "0" / "5" == 0.0     # String coerced: 0.0 / 5.0 = 0.0
assert "5" / "0" == 5.0     # String coerced: 5.0 / 0.0 = infinity (handled by runtime)
assert "0" ^ "5" == 0.0     # String coerced: 0.0 ^ 5.0 = 0.0
assert "5" ^ "0" == 1.0     # String coerced: 5.0 ^ 0.0 = 1.0
print("String operations with zero passed!")

print("Testing string operations with decimal numbers...")
# String operations with decimal numbers
assert "5.5" + "2.3" == "5.52.3"  # String concatenation
assert "5.5" - "2.3" == 3.2       # String coerced: 5.5 - 2.3 = 3.2
assert "2.5" * "4.0" == 10.0      # String coerced: 2.5 * 4.0 = 10.0
assert "15.0" / "3.0" == 5.0      # String coerced: 15.0 / 3.0 = 5.0
assert "10.5" % "3.0" == 1.5      # String coerced: 10.5 % 3.0 = 1.5
assert "2.0" ^ "3.0" == 8.0       # String coerced: 2.0 ^ 3.0 = 8.0
print("String operations with decimal numbers passed!")

print("Testing string operations with empty strings...")
# String operations with empty strings
assert "" + "" == ""        # Empty string concatenation
assert "" + "Hello" == "Hello"  # Empty + string
assert "Hello" + "" == "Hello"  # String + empty
assert "" - "Hello" == -5.0     # Empty string length is 0: 0 - 5 = -5
assert "Hello" - "" == 5.0      # String length - empty: 5 - 0 = 5
assert "" * "Hello" == 0.0      # Empty string length is 0: 0 * 5 = 0
assert "Hello" * "" == 0.0      # String length * empty: 5 * 0 = 0
assert "" / "Hello" == 0.0      # Empty string length is 0: 0 / 5 = 0
assert "Hello" / "" == 5.0      # String length / empty: 5 / 0 = infinity (handled by runtime)
assert "" % "Hello" == true     # Empty string length equals 5: 0 == 5 (false)
assert "Hello" % 0 == false     # String length equals 0: 5 == 0 (false)
print("String operations with empty strings passed!")

print("Testing string operations with single characters...")
# String operations with single characters
assert "a" + "b" == "ab"        # Single character concatenation
assert "a" - "b" == -1.0        # String coerced: 1 - 1 = 0 (but parsing fails, so length)
assert "a" * "b" == 1.0         # String coerced: 1 * 1 = 1 (but parsing fails, so length)
assert "a" / "b" == 1.0         # String coerced: 1 / 1 = 1 (but parsing fails, so length)
assert "a" % "b" == 0.0         # String coerced: 1 % 1 = 0 (but parsing fails, so length)
assert "a" ^ "b" == 1.0         # String coerced: 1 ^ 1 = 1 (but parsing fails, so length)
print("String operations with single characters passed!")

print("Testing string operations with special characters...")
# String operations with special characters (no escape sequences)
assert "Hello!" + "World?" == "Hello!World?"
assert "Test@123" + "ABC#456" == "Test@123ABC#456"
assert "Hello!" - "World?" == 0.0   # Both length 6: 6 - 6 = 0
assert "Test@123" * "ABC#456" == 56.0  # 8 * 7 = 56
assert "Hello!" / "World?" == 1.0   # 6 / 6 = 1
assert "Test@123" % "ABC#456" == 1.0  # 8 % 7 = 1
assert "Hello!" ^ "World?" == 1.0   # 6 ^ 6 = 1 (any number to power of 0 is 1, but 6^6 is 46656)
print("String operations with special characters passed!")

print("Testing string operations with numbers as strings...")
# String operations with numbers as strings
assert "123" + "456" == "123456"  # String concatenation
assert "123" - "456" == -333.0    # String coerced: 123 - 456 = -333
assert "123" * "456" == 56088.0   # String coerced: 123 * 456 = 56088
assert "1000" / "10" == 100.0     # String coerced: 1000 / 10 = 100
assert "17" % "5" == 2.0          # String coerced: 17 % 5 = 2
assert "2" ^ "10" == 1024.0       # String coerced: 2 ^ 10 = 1024
print("String operations with numbers as strings passed!")

print("Testing string operations with mixed numeric strings...")
# String operations with mixed numeric strings
assert "5.5" + "3" == "5.53"      # String concatenation
assert "5" + "3.5" == "53.5"      # String concatenation
assert "5.5" - "3" == 2.5         # String coerced: 5.5 - 3 = 2.5
assert "5" - "3.5" == 1.5         # String coerced: 5 - 3.5 = 1.5
assert "2.5" * "4" == 10.0        # String coerced: 2.5 * 4 = 10
assert "2" * "4.5" == 9.0         # String coerced: 2 * 4.5 = 9
assert "10.5" / "2" == 5.25       # String coerced: 10.5 / 2 = 5.25
assert "10" / "2.5" == 4.0        # String coerced: 10 / 2.5 = 4
print("String operations with mixed numeric strings passed!")

print("Testing string operations with invalid numeric strings...")
# String operations with invalid numeric strings (default to length)
assert "Hello" + "123" == "Hello123"  # String concatenation
assert "Hello" - "123" == 2.0         # 5 - 3 = 2 (length-based)
assert "Hello" * "123" == 15.0        # 5 * 3 = 15 (length-based)
assert "Hello" / "123" == 1.0         # 5 / 3 = 1.666... (length-based, truncated)
assert "Hello" % "123" == 2.0         # 5 % 3 = 2 (length-based)
assert "Hello" ^ "123" == 125.0       # 5 ^ 3 = 125 (length-based)
print("String operations with invalid numeric strings passed!")

print("Testing complex string expressions...")
# Complex string expressions
assert ("Hello" + "World") + "!" == "HelloWorld!"
assert "Hello" + ("World" + "!") == "HelloWorld!"
assert ("Test" + "123") - "456" == -333.0  # "Test123" coerced to float: 7 - 456 = -449
assert "Hello" * ("World" + "!") == 35.0   # "World!" length is 6: 5 * 6 = 30 (but parsing fails)
assert ("Hello" + "World") / "Test" == 2.0 # "HelloWorld" length is 10: 10 / 4 = 2.5 (truncated)
print("Complex string expressions passed!")

print("Testing string operations with variables...")
# String operations with variables
string str1 = "Hello"
string str2 = "World"
string numStr = "123"
int num = 456

assert str1 + str2 == "HelloWorld"
assert str1 + numStr == "Hello123"
assert numStr + num == "123456"
assert str1 - numStr == -118.0  # 5 - 123 = -118 (length-based)
assert numStr - num == -333.0   # 123 - 456 = -333
assert str1 * numStr == 615.0   # 5 * 123 = 615 (length-based)
assert numStr * num == 56088.0  # 123 * 456 = 56088
print("String operations with variables passed!")

print("Testing string operations with function calls...")
# String operations with function calls (assuming simple functions exist)
def string GetGreeting() { return "Hello" }
def string GetName() { return "World" }
def int GetNumber() { return 42 }

assert GetGreeting() + GetName() == "HelloWorld"
assert GetGreeting() + GetNumber() == "Hello42"
assert GetNumber() + GetGreeting() == "42Hello"
assert GetGreeting() - GetName() == 0.0  # Both length 5: 5 - 5 = 0
assert GetNumber() - GetGreeting() == 37.0  # 42 - 5 = 37
print("String operations with function calls passed!")

print("Testing string operations with parentheses...")
# String operations with parentheses
assert ("Hello" + "World") + "!" == "HelloWorld!"
assert "Hello" + ("World" + "!") == "HelloWorld!"
assert (("Hello" + "World") + "!") + "Test" == "HelloWorld!Test"
assert "Hello" + (("World" + "!") + "Test") == "HelloWorld!Test"
print("String operations with parentheses passed!")

print("Testing string operations with comparison operators...")
# String operations with comparison operators (these are handled separately)
# But we can test that string math operations work in comparison contexts
assert ("Hello" + "World") == "HelloWorld"
assert ("Test" + "123") != "Test456"
assert ("Hello" + "World") == ("Hello" + "World")
assert ("Test" + "123") != ("Test" + "456")
print("String operations with comparison operators passed!")

print("Testing edge cases...")
# Edge cases
assert "A" + "B" + "C" + "D" + "E" == "ABCDE"
assert "VeryLongStringForTesting" + "AnotherLongString" == "VeryLongStringForTestingAnotherLongString"
assert "SingleCharacter" % 15 == true  # Length 15 equals 15
assert "Short" % 5 == true             # Length 5 equals 5
assert "LongerString" % 13 == true     # Length 13 equals 13
print("Edge cases passed!")

print("All String Operations Tests Completed Successfully!")
print("==================================================") 